{"version":3,"sources":["reducer/meme.js","action/index.js","reducer/mymeme.js","reducer/index.js","component/Meme/Meme.js","Secret.js","component/Meme/NewMeme.js","component/App.js","index.js"],"names":["meme","state","arguments","length","undefined","action","type","data","mymeme","concat","Object","toConsumableArray","newState","map","index","RootReducer","combineReducers","Meme","hover","postMeme","_this$props","_this","props","text0","text1","createMeme","template_id","id","_this2","this","react_default","a","createElement","className","onMouseEnter","setState","onMouseLeave","onClick","src","url","alt","name","React","Component","connect","newmeme_obj","dispatch","bodyParams","keys","key","encodeURIComponent","join","fetch","method","headers","Content-Type","body","then","res","json","postMemeJson","NewMeme","removeNewMeme","href","target","rel","download","App","increament","Meme_NewMeme","value","onChange","e","slice","component_Meme_Meme","store","createStore","applyMiddleware","thunk","subscribe","console","log","getState","memes","reciveMeme","catch","err","ReactDOM","render","react_redux_es","component_App","document","getElementById"],"mappings":"yOAWeA,EATF,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpC,OAAQC,EAAOC,MACd,ICFsB,WDGrB,OAAOD,EAAOE,KACf,QACC,OAAON,YEeKO,EApBA,WAAwB,IAAvBP,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtC,OAAQC,EAAOC,MACd,IDmBsB,WClBrB,SAAAG,OAAAC,OAAAC,EAAA,EAAAD,CAAYT,GAAZ,CAAmBI,EAAOL,OAC3B,IDmD4B,iBClD3B,IAAIY,EAAW,GASf,OAPAX,EAAQA,EAAMY,IAAI,SAACN,EAAMO,GAIxB,OAHIA,IAAUT,EAAOS,QACpBF,EAAQ,GAAAH,OAAAC,OAAAC,EAAA,EAAAD,CAAQE,GAAR,CAAkBL,KAEpB,IAGDK,EACR,QACC,OAAOX,ICdGc,EAAcC,YAAgB,CAC1ChB,OACAQ,8CCAKS,oNACLhB,MAAQ,CACPiB,OAAO,KAGRC,SAAW,WAAM,IAAAC,EACSC,EAAKC,MAAtBC,EADQH,EACRG,MAAOC,EADCJ,EACDI,MAEfH,EAAKC,MAAMG,WAAW,CACrBF,QACAC,QACAE,YAAaL,EAAKC,MAAMtB,KAAK2B,8EAItB,IAAAC,EAAAC,KACA7B,EAAS6B,KAAKP,MAAdtB,KAER,OACC8B,EAAAC,EAAAC,cAAA,OACCC,UAAU,YACVC,aAAc,kBAAMN,EAAKO,SAAS,CAAEjB,OAAQU,EAAK3B,MAAMiB,SACvDkB,aAAc,kBAAMR,EAAKO,SAAS,CAAEjB,OAAQU,EAAK3B,MAAMiB,SACvDmB,QAAS,kBAAMT,EAAKT,aAEpBW,EAAAC,EAAAC,cAAA,OAAKM,IAAKtC,EAAKuC,IAAKC,IAAKxC,EAAKyC,KAAMR,UAAWJ,KAAK5B,MAAMiB,MAAQ,sBAAwB,aAE1FY,EAAAC,EAAAC,cAAA,KAAGC,UAAWJ,KAAK5B,MAAMiB,MAAQ,WAAa,UAAWlB,EAAKyC,cA3B/CC,IAAMC,YAiCVC,cAAQ,KAAM,CAAEnB,WHYL,SAACoB,GAC1B,OAAO,SAACC,GACP,OArBmB,SAAC9C,GACrBA,EAAI,SIjCmB,cJkCvBA,EAAI,SIjCmB,WJmCvB,IAAM+C,EAAarC,OAAOsC,KAAKhD,GAC7Ba,IAAI,SAACoC,GAAD,OAASC,mBAAmBD,GAAO,IAAMC,mBAAmBlD,EAAKiD,MACrEE,KAAK,KAIP,OAAOC,MAFK,wCAEM,CACjBC,OAAQ,OACRC,QAAS,CACRC,eAAgB,qCAEjBC,KAAMT,IACJU,KAAK,SAACC,GAAD,OAASA,EAAIC,SAKbC,CAAaf,GAAaY,KAAK,SAACE,GAAD,OAAUb,EA3B1C,CACNxC,KAJsB,WAKtBN,KAyBiE2D,SGdpDf,CAA8B3B,GEjCvC4C,mLACI,IAAAxC,EAAAQ,KACR,OACCC,EAAAC,EAAAC,cAAA,WACEH,KAAKP,MAAMd,OAAOK,IAAI,SAACb,EAAMc,GAAU,IAC/BP,EAASP,EAATO,KAER,OACCuB,EAAAC,EAAAC,cAAA,OAAKiB,IAAKnC,EAAOmB,UAAU,yBAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcO,IAAI,UAAUF,IAAK/B,EAAKgC,MACrDT,EAAAC,EAAAC,cAAA,QACCC,UAAU,gBACVI,QAAS,WACRhB,EAAKC,MAAMwC,cAAchD,KAH3B,QAQAgB,EAAAC,EAAAC,cAAA,KACCC,UAAU,eACV8B,KAAMxD,EAAKgC,IACXyB,OAAO,SACPC,IAAI,sBACJC,UAAQ,GALT,qBAlBevB,aAsCPC,cAHS,SAAC3C,GAAD,MAAY,CACnCO,OAAQP,EAAMO,SAEyB,CACvCsD,cLc4B,SAAChD,GAC7B,MAAO,CACNR,KAJ4B,iBAK5BQ,WKlBa8B,CAEZiB,GCzCGM,6MACLlE,MAAQ,CACPmE,WAAY,GACZ7C,MAAO,IACPC,MAAO,OAGR4C,WAAa,WAAM,IACZA,EAAe/C,EAAKpB,MAApBmE,WACN/C,EAAKc,SAAS,CACbiC,WAAYA,EAAa,8EAGlB,IAAAxC,EAAAC,KAER,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,yCAEAF,EAAAC,EAAAC,cAACqC,EAAD,MAEAvC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,UAA6C,IAC7CH,EAAAC,EAAAC,cAAA,SACCsC,MAAOzC,KAAK5B,MAAMsB,MAClBU,UAAU,WACV3B,KAAK,OACLiE,SAAU,SAACC,GAAD,OAAO5C,EAAKO,SAAS,CAAEZ,MAAOiD,EAAER,OAAOM,SACjD3C,GAAG,KAEJG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,UAA6C,IAC7CH,EAAAC,EAAAC,cAAA,SACCsC,MAAOzC,KAAK5B,MAAMuB,MAClBS,UAAU,WACV3B,KAAK,OACLiE,SAAU,SAACC,GAAD,OAAO5C,EAAKO,SAAS,CAAEX,MAAOgD,EAAER,OAAOM,SACjD3C,GAAG,MAIJE,KAAKP,MAAMtB,KACVyE,MAAM,EAAG5C,KAAK5B,MAAMmE,YACpBvD,IAAI,SAACN,GAAD,OACJuB,EAAAC,EAAAC,cAAC0C,EAAD,CAAMzB,IAAK1C,EAAKoB,GAAI3B,KAAMO,EAAMgB,MAAOK,EAAK3B,MAAMsB,MAAOC,MAAOI,EAAK3B,MAAMuB,UAG7EM,EAAAC,EAAAC,cAAA,WACEH,KAAKP,MAAMtB,KAAKG,QAAU0B,KAAKP,MAAMtB,KAAKG,OAAS0B,KAAK5B,MAAMmE,WAC9DtC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaI,QAAS,kBAAMT,EAAKwC,eAAnD,gBAIA,YArDYzB,aAiEHC,cAJI,SAAC3C,GAAD,MAAY,CAC9BD,KAAMC,EAAMD,OAGsB,KAApB4C,CAA0BuB,GC3DnCQ,SAAQC,YAAY7D,EAAa8D,YAAgBC,OACvDH,EAAMI,UAAU,WACfC,QAAQC,IAAI,sBAAuBN,EAAMO,cAG1CP,EAAM7B,SPEE,SAACA,GAJDM,MADK,qCACMK,KAAK,SAACC,GAAD,OAASA,EAAIC,SAKnBF,KAAK,SAACE,GAAD,OAAUb,EAfd,SAACa,GAEnB,MAAO,CACNrD,KALsB,WAMtBC,KAHiBoD,EAAKpD,KAAf4E,OAciCC,CAAWzB,MAAQ0B,MAAM,SAACC,GAAD,OAASA,MOD5EC,IAASC,OACR1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAUd,MAAOA,GAChB7C,EAAAC,EAAAC,cAAC0D,EAAD,OAEDC,SAASC,eAAe","file":"static/js/main.f0d0c002.chunk.js","sourcesContent":["import { SET_MEME } from '../action';\r\n\r\nconst meme = (state = [], action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_MEME:\r\n\t\t\treturn action.data;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default meme;\r\n","import { username, password } from '../Secret';\r\n\r\nexport const SET_MEME = 'SET_MEME';\r\n\r\nconst reciveMeme = (json) => {\r\n\tconst { memes } = json.data;\r\n\treturn {\r\n\t\ttype: SET_MEME,\r\n\t\tdata: memes\r\n\t};\r\n};\r\n\r\nconst fetchMemeJSON = () => {\r\n\tconst url = 'https://api.imgflip.com/get_memes';\r\n\treturn fetch(url).then((res) => res.json());\r\n};\r\n\r\nexport const fetchMeme = () => {\r\n\treturn (dispatch) => {\r\n\t\tfetchMemeJSON().then((json) => dispatch(reciveMeme(json))).catch((err) => err);\r\n\t};\r\n};\r\n\r\nexport const NEW_MEME = 'NEW_MEME';\r\n\r\nconst newMeme = (meme) => {\r\n\treturn {\r\n\t\ttype: NEW_MEME,\r\n\t\tmeme\r\n\t};\r\n};\r\n\r\nconst postMemeJson = (meme) => {\r\n\tmeme['username'] = username;\r\n\tmeme['password'] = password;\r\n\r\n\tconst bodyParams = Object.keys(meme)\r\n\t\t.map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(meme[key]))\r\n\t\t.join('&');\r\n\r\n\tconst url = 'https://api.imgflip.com/caption_image';\r\n\r\n\treturn fetch(url, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\r\n\t\t},\r\n\t\tbody: bodyParams\r\n\t}).then((res) => res.json());\r\n};\r\n\r\nexport const createMeme = (newmeme_obj) => {\r\n\treturn (dispatch) => {\r\n\t\treturn postMemeJson(newmeme_obj).then((json) => dispatch(newMeme(json)));\r\n\t};\r\n};\r\n\r\nexport const REMOVE_NEWMEME = 'REMOVE_NEWMEME';\r\n\r\nexport const removeNewMeme = (index) => {\r\n\treturn {\r\n\t\ttype: REMOVE_NEWMEME,\r\n\t\tindex\r\n\t}\r\n}\r\n\r\n","import { NEW_MEME, REMOVE_NEWMEME } from '../action';\r\n\r\nconst mymeme = (state = [], action) => {\r\n\tswitch (action.type) {\r\n\t\tcase NEW_MEME:\r\n\t\t\treturn [ ...state, action.meme ];\r\n\t\tcase REMOVE_NEWMEME:\r\n\t\t\tlet newState = [];\r\n\r\n\t\t\tstate = state.map((data, index) => {\r\n\t\t\t\tif (index !== action.index) {\r\n\t\t\t\t\tnewState = [ ...newState, data ];\r\n\t\t\t\t}\r\n\t\t\t\treturn 1;\r\n\t\t\t});\r\n\r\n\t\t\treturn newState;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default mymeme;\r\n","import { combineReducers } from 'redux';\r\nimport meme from './meme';\r\nimport mymeme from './mymeme';\r\n\r\nexport const RootReducer = combineReducers({\r\n\tmeme,\r\n\tmymeme\r\n});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createMeme } from '../../action';\r\n\r\nimport './Meme.css';\r\n\r\nclass Meme extends React.Component {\r\n\tstate = {\r\n\t\thover: false\r\n\t};\r\n\r\n\tpostMeme = () => {\r\n\t\tconst { text0, text1 } = this.props;\r\n\r\n\t\tthis.props.createMeme({\r\n\t\t\ttext0,\r\n\t\t\ttext1,\r\n\t\t\ttemplate_id: this.props.meme.id\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { meme } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"meme-item\"\r\n\t\t\t\tonMouseEnter={() => this.setState({ hover: !this.state.hover })}\r\n\t\t\t\tonMouseLeave={() => this.setState({ hover: !this.state.hover })}\r\n\t\t\t\tonClick={() => this.postMeme()}\r\n\t\t\t>\r\n\t\t\t\t<img src={meme.url} alt={meme.name} className={this.state.hover ? 'meme-img darken-img' : 'meme-img'} />\r\n\r\n\t\t\t\t<p className={this.state.hover ? 'meme-txt' : 'no-txt'}>{meme.name}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(null, { createMeme })(Meme);\r\n","export const username = 'supermanzzz';\r\nexport const password = '12345678';\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Meme.css';\r\n\r\nimport { removeNewMeme } from '../../action';\r\n\r\nclass NewMeme extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.props.mymeme.map((meme, index) => {\r\n\t\t\t\t\tconst { data } = meme;\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={index} className=\"my-meme-img-container\">\r\n\t\t\t\t\t\t\t<img className=\"my-meme-img\" alt=\"my-meme\" src={data.url} />\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tclassName=\"my-meme-close\"\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tthis.props.removeNewMeme(index);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t&times;\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\tclassName=\"my-meme-save\"\r\n\t\t\t\t\t\t\t\thref={data.url}\r\n\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t\t\tdownload\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t&#8675;\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tmymeme: state.mymeme\r\n});\r\nexport default connect(mapStateToProps, {\r\n\tremoveNewMeme\r\n})(NewMeme);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Meme from './Meme/Meme';\r\nimport NewMeme from './Meme/NewMeme';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tincreament: 10,\r\n\t\ttext0: '1',\r\n\t\ttext1: '2'\r\n\t};\r\n\r\n\tincreament = () => {\r\n\t\tlet { increament } = this.state;\r\n\t\tthis.setState({\r\n\t\t\tincreament: increament + 10\r\n\t\t});\r\n\t};\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3> Frozen Lwin MemeGenerator </h3>\r\n\r\n\t\t\t\t<NewMeme />\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label className=\"form-label\">TopTxt</label>{' '}\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={this.state.text0}\r\n\t\t\t\t\t\tclassName=\"form-txt\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tonChange={(e) => this.setState({ text0: e.target.value })}\r\n\t\t\t\t\t\tid=\"\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<label className=\"form-label\">BtnTxt</label>{' '}\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tvalue={this.state.text1}\r\n\t\t\t\t\t\tclassName=\"form-txt\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tonChange={(e) => this.setState({ text1: e.target.value })}\r\n\t\t\t\t\t\tid=\"\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{this.props.meme\r\n\t\t\t\t\t.slice(0, this.state.increament)\r\n\t\t\t\t\t.map((data) => (\r\n\t\t\t\t\t\t<Meme key={data.id} meme={data} text0={this.state.text0} text1={this.state.text1} />\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.props.meme.length && this.props.meme.length > this.state.increament ? (\r\n\t\t\t\t\t\t<button className=\"MemeButton\" onClick={() => this.increament()}>\r\n\t\t\t\t\t\t\tLoad More ..\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t''\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapToState = (state) => ({\r\n\tmeme: state.meme\r\n});\r\n\r\nexport default connect(mapToState, null)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { RootReducer } from './reducer';\nimport { fetchMeme } from './action';\n\nimport App from './component/App';\nimport './index.css';\n\nconst store = createStore(RootReducer, applyMiddleware(thunk));\nstore.subscribe(() => {\n\tconsole.log('store.subscribe => ', store.getState());\n});\n\nstore.dispatch(fetchMeme());\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}